name: Jest Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14' # Specify the Node.js version you need

      # Upgrade npm to the latest version to support lockfileVersion@3
      - name: Upgrade npm to latest
        run: npm install -g npm@latest

      # Clear npm cache to avoid potential issues with outdated or corrupt cache
      - name: Clear npm cache
        run: npm cache clean --force

      # Cache Node.js dependencies to speed up builds
      - name: Cache Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install project dependencies
      - name: Install Dependencies
        run: npm install

      # List node_modules to verify installation
      - name: List node_modules
        run: ls -R node_modules || echo "node_modules not found"

      # Run Jest tests (non-watch mode)
      - name: Run Tests
        run: npm test -- --watchAll=false

      # Generate code coverage report with Jest
      - name: Generate Code Coverage Report
        run: npm run coverage

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov-report/lcov-report.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          debug: true

      # Upload Jest output and coverage reports as artifacts
      - name: Upload Jest Output for Debugging
        uses: actions/upload-artifact@v3
        with:
          name: jest-output
          path: ./coverage/*

      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage/

      # Fail fast if any test fails
      - name: Fail Fast on Test Failures
        if: failure()
        run: exit 1

      # Notify the team on Slack in case of test failure
      - name: Notify Team on Test Failures
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: your-slack-channel # Replace with your Slack channel name
          SLACK_COLOR: ${{ job.status }} # Use the job status for the color (e.g., danger for failure)
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_TITLE: Jest Integration Tests Failed
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # Replace with your Slack webhook URL
